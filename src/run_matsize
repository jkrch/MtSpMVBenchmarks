#!/bin/bash
#
# Only symmetric matrices!

bench=matsize

# Command line arguments 
julia=$1
kernels=$2
formats=$3
nthreads=$4
solver=$5
matrix=$6
ns=$7
nnzrow=$8

# Convert argument strings to arrays
IFS=' ' read -ra kernels <<< "$kernels"
IFS=' ' read -ra formats <<< "$formats"
IFS=' ' read -ra nthreads <<< "$nthreads"
IFS=' ' read -ra ns <<< "$ns"

# Create result folder
h=$(hostname)
d=$(date +%Y-%m-%d)
t=$(date +%H-%M-%S)
header="${h}__${d}__${t}"
echo $header
folder="../benchmark/${solver}/${bench}/${header}"
mkdir -p $folder

#######################################
# Checks if an array contains a string.
# Globals:
#   None
# Arguments:
#   array
#   string
# Outputs:
#   Returns 1 if string is in array, 0 if not.
#######################################
function contains() {
    local n=$#
    local value=${!n}
    for ((i=1; i < $#; i++)); do
        if [ "${!i}" == "${value}" ]; then
            echo "y"
            return 0
        fi
    done
    echo "n"
    return 1
}

#######################################
# Run benchmarks in julia.
# Globals:
#   N
#   result
#   julia
#   nnzrow
#   kernel
# Arguments:
#   None
# Outputs:
#   Benchmark results to csv file
#######################################
function runbenchmarks() {
	printf "matsize = "
	# Write header to csv file
	echo "matsize  seconds" >> $result
	# Run benchmarks for increasing size of matrix and write results to csv
	for n in "${ns[@]}"; do
		printf "%d.." $n
		printf "%d" $n >> $result
		$julia "benchmark_${kernel}.jl" $format $solver $matrix $n $n $nnzrow >> $result
	done
	echo
}

# Benchmark serial CSR MatVec from SparseArrays.jl
if [ $(contains "${kernels[@]}" "ser") == "y" ] && 
[ $(contains "${formats[@]}" "csr") == "y" ]; then
	echo "SparseArrays.jl CSR, 1 thread(s)"
	kernel=ser
	format=csr
	result="${folder}/result_${kernel}_${format}_1.csv"
	export MKL_NUM_THREADS=1
	export JULIA_NUM_THREADS=1
	runbenchmarks
fi

# Benchmark serial CSC MatVec from SparseArrays.jl
if [ $(contains "${kernels[@]}" "ser") == "y" ] && 
[ $(contains "${formats[@]}" "csc") == "y" ]; then
	echo "SparseArrays.jl CSC, 1 thread(s)"
	kernel=ser
	format=csc
	result="${folder}/result_${kernel}_${format}_1.csv"
	export MKL_NUM_THREADS=1
	export JULIA_NUM_THREADS=1
	runbenchmarks
fi

# Benchmark multithreaded CSR MatVec from MtSpMV.jl
if [ $(contains "${kernels[@]}" "par") == "y" ] && 
[ $(contains "${formats[@]}" "csr") == "y" ]; then
	for t in "${nthreads[@]}"; do
		echo "MtSpMV.jl CSR, $t thread(s)"
		kernel=par
		format=csr
		result="${folder}/result_${kernel}_${format}_$t.csv"
		export MKL_NUM_THREADS=1
		export JULIA_NUM_THREADS=$t
		runbenchmarks
	done
fi

# Benchmark multithreaded CSR MatVec from MKLSparse.jl
if [ $(contains "${kernels[@]}" "mkl") == "y" ] && 
[ $(contains "${formats[@]}" "csr") == "y" ]; then
	for t in "${nthreads[@]}"; do
	    echo "MKLSparse.jl CSR, $t thread(s)"
	    kernel=mkl
	    format=csr
	    result="${folder}/result_${kernel}_${format}_$t.csv"
	    export MKL_NUM_THREADS=$t
	    export JULIA_NUM_THREADS=1
	    runbenchmarks
	done
fi

# Benchmark multithreaded CSC MatVec from MKLSparse.jl
if [ $(contains "${kernels[@]}" "mkl") == "y" ] && 
[ $(contains "${formats[@]}" "csc") == "y" ]; then
	for t in "${nthreads[@]}"; do
	    echo "MKLSparse.jl CSC, $t thread(s)"
	    kernel=mkl
	    format=csc
	    result="${folder}/result_${kernel}_${format}_$t.csv"
	    export MKL_NUM_THREADS=$t
	    export JULIA_NUM_THREADS=1
	    runbenchmarks
	done
fi

# Plot results
echo "Plotting.."
$julia plot_cl.jl $folder matsize
